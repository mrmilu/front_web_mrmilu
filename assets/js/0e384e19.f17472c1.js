"use strict";(self.webpackChunkapi_docs=self.webpackChunkapi_docs||[]).push([[671],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(t),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return t?a.createElement(h,l(l({ref:n},c),{},{components:t})):a.createElement(h,l({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9881:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),l=["components"],i={sidebar_position:1},s="Intro",p={unversionedId:"intro",id:"intro",title:"Intro",description:"This package collects a handful amount of methods, classes, interfaces, hooks and more that can and should be reused",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/front_web_mrmilu/docs/intro",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Hooks",permalink:"/front_web_mrmilu/docs/Packages/Hooks/"}},c={},u=[{value:"Usage",id:"usage",level:3},{value:"Development process",id:"development-process",level:4},{value:"Add new package",id:"add-new-package",level:3},{value:"Committing changes",id:"committing-changes",level:3},{value:"Publishing release",id:"publishing-release",level:3}],m={toc:u};function d(e){var n=e.components,t=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"intro"},"Intro"),(0,o.kt)("p",null,"This package collects a handful amount of methods, classes, interfaces, hooks and more that can and should be reused\nacross any Mr.Mil\xfa project."),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Add ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/wclr/yalc"},"yalc")," local repository to your computer if you don't already have it"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn global add yalc\n")),(0,o.kt)("p",null,"Install dependencies"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn\n")),(0,o.kt)("p",null,"Build packages with any of this ",(0,o.kt)("strong",{parentName:"p"},"two alternatives"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Builds packages")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn build\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Build packages, watch for changes and automatically pushes to yalc repo")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn watch\n")),(0,o.kt)("h4",{id:"development-process"},"Development process"),(0,o.kt)("p",null,"If you want to test a package in your project, the best way is to develop under ",(0,o.kt)("inlineCode",{parentName:"p"},"watch"),"\nscript because it automatically pushes to yalc local repository."),(0,o.kt)("p",null,"So to stay in sync with the feature you are developing in your project you must\nlink to yalc repo even if you have already added the real package to your ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@front_web_mrmilu/services": "mrmilu/front_web_mrmilu#@front_web_mrmilu/services-v1.0.1"\n  }\n}\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"This is not necessary to develop but if you already have it installed it won't interfere")),(0,o.kt)("p",null,"To link your package to your project with yalc run the following command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'yalc link "@front_web_mrmilu/services" # here put the name of your package of choice\n')),(0,o.kt)("p",null,"Now your ",(0,o.kt)("inlineCode",{parentName:"p"},"node_modules")," package it's linked to your local yalc repository."),(0,o.kt)("h3",{id:"add-new-package"},"Add new package"),(0,o.kt)("p",null,"Create a folder inside ",(0,o.kt)("inlineCode",{parentName:"p"},"packages"),", with the package name (without the prefix @front_web_mrimilu) and with it's corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," folder and ",(0,o.kt)("inlineCode",{parentName:"p"},"index.ts"),"\nentrypoint. It should look like this: ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/my_new_package/src/index.ts"),"."),(0,o.kt)("p",null,"Inside the package folder run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn init"),", answer the questions (owner should be always Mr.Mil\xfa and ",(0,o.kt)("strong",{parentName:"p"},"version\nMUST MATCH current packages versions"),". For example if all packages are in version ",(0,o.kt)("inlineCode",{parentName:"p"},"1.0.0")," you should answer ",(0,o.kt)("inlineCode",{parentName:"p"},"1.0.0")," to yarn questions)."),(0,o.kt)("p",null,"Once finished run the following command ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn preconstruct init"),", this will modify\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," file created by ",(0,o.kt)("em",{parentName:"p"},"yarn")," with the corresponding ES Modules and CommonJS entrypoint."),(0,o.kt)("p",null,"Then add to the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," the following property: ",(0,o.kt)("inlineCode",{parentName:"p"},'"sideEffects: false"'),". By adding this we are telling bundlers that code splitting\ncan be used between package parts, so ",(0,o.kt)("strong",{parentName:"p"},"avoid side effects at\nall cost")," between them (more info ",(0,o.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/49203452/3416714"},"here"),")."),(0,o.kt)("p",null,"Also, you will need to add the following script and ",(0,o.kt)("inlineCode",{parentName:"p"},"peerDependency"),". The script it would be used by ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn watch"),"\nto push changes to yalc on change and babel-runtime it will be used by babel-regenerator to add babel helpers\nto your package on runtime:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "yalc-push": "yalc push --private"\n  },\n  "peerDependencies": {\n    "react": "18.x",\n    "@babel/runtime": "7.x"\n  }\n}\n')),(0,o.kt)("p",null,"Then create a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"typedoc.json"),". This file weill be used by ",(0,o.kt)("a",{parentName:"p",href:"https://typedoc.org/"},"TypeDoc")," to automatically generate markdown\ndocumentation based on exported methods, classes and interfaces. Inside this file put the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "entryPoints": ["src/index.ts"],\n  "out": "../../api-docs/docs/Packages/{Package name with capital case. For example: Network}",\n  "readme": "none",\n  "plugin": "typedoc-plugin-markdown",\n  "entryDocument": "{Package name with capital case. For example: Network}.md",\n  "excludeExternals": true\n}\n')),(0,o.kt)("p",null,"Finally, publish the new package to ",(0,o.kt)("inlineCode",{parentName:"p"},"yalc"),". To accomplish this go to the package dir and run\nthe following command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yalc publish\n")),(0,o.kt)("p",null,"Now you can develop your package by exporting the desired methods, classes, etc. in the ",(0,o.kt)("inlineCode",{parentName:"p"},"index.ts")," file."),(0,o.kt)("p",null,"Final example of a ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "@front_web_mrmilu/{packageName}}",\n  "version": "1.1.0",\n  "main": "dist/front_web_mrmilu-{packageName}.cjs.js",\n  "module": "dist/front_web_mrmilu-{packageName}.esm.js",\n  "author": "Mr.Mil\xfa",\n  "license": "MIT",\n  "sideEffects": false,\n  "scripts": {\n    "yalc-push": "yalc push --private"\n  },\n  "peerDependencies": {\n    "@babel/runtime": "7.x"\n  }\n}\n')),(0,o.kt)("h3",{id:"committing-changes"},"Committing changes"),(0,o.kt)("p",null,"This project uses ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.conventionalcommits.org/en/v1.0.0/#summary"},"conventional commits"))," with the package ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/conventional-changelog/commitlint"},"commitlint"),"\nand extends its usage. Each time you make a commit it's obligatory to add a ",(0,o.kt)("strong",{parentName:"p"},"scope")," to your commit.\nThis way when we make a release the automatically generated changelog will show in which package changes have been made. The accepted scopes\nare: ",(0,o.kt)("strong",{parentName:"p"},"root")," (when changes at root level are made) and any package name (dir name) ",(0,o.kt)("strong",{parentName:"p"},"without")," the prefix ",(0,o.kt)("strong",{parentName:"p"},"@front_web_mrmilu"),"."),(0,o.kt)("h3",{id:"publishing-release"},"Publishing release"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This process ",(0,o.kt)("strong",{parentName:"p"},"should not be executed locally")," because it's done\nautomatically through a GitHub action when merging to master branch or pushing to it. It is in\nthe README just for documentary purpose.\nIf you want to push to ",(0,o.kt)("strong",{parentName:"p"},"master")," (",(0,o.kt)("em",{parentName:"p"},"which you shouldn't"),") without triggering GitHub actions\nrun the command ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn skip-ci")," and then push. This will create an empty commit with the corresponding\nmessage telling GitHub to skip action workflows in that commit push.")),(0,o.kt)("p",null,"Once you have finished your changes and done the commits correctly you\nhave to bump package versions and update changelog. This is done automatically\nby running the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn release\n")),(0,o.kt)("p",null,"Once ",(0,o.kt)("strong",{parentName:"p"},"standard version")," updates packages versions and changelog you are able to both\npush tags and publish packages. To achieve this, do the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"git push --follow-tags origin master\nyarn gitpkg-publish\n")),(0,o.kt)("p",null,"Packages in this repo are published as git tags, so the repository works also as a package repository.\nIn future versions this could be migrated to a private npm repository."))}d.isMDXComponent=!0}}]);